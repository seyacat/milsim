import{A as r}from"./index-5b40fb92.js";const s="/api";class c{static async getGames(){const t=await fetch(`${s}/games`,{headers:r.getAuthHeaders()});if(!t.ok)throw new Error("Failed to fetch games");return t.json()}static async getGame(t){const e=await fetch(`${s}/games/${t}`,{headers:r.getAuthHeaders()});if(!e.ok)throw new Error("Failed to fetch game");return e.json()}static async createGame(t){const e=await fetch(`${s}/games`,{method:"POST",headers:r.getAuthHeaders(),body:JSON.stringify(t)});if(!e.ok){const a=await e.json();throw new Error(a.message||"Failed to create game")}return e.json()}static async updateGame(t,e){const a=await fetch(`${s}/games/${t}`,{method:"PATCH",headers:r.getAuthHeaders(),body:JSON.stringify(e)});if(!a.ok){const o=await a.json();throw new Error(o.message||"Failed to update game")}return a.json()}static async deleteGame(t){const e=await fetch(`${s}/games/${t}`,{method:"DELETE",headers:r.getAuthHeaders()});if(!e.ok){const a=await e.json();throw new Error(a.message||"Failed to delete game")}}static async joinGame(t){const e=await fetch(`${s}/games/${t}/join`,{method:"POST",headers:r.getAuthHeaders()});if(!e.ok){const a=await e.json();throw new Error(a.message||"Failed to join game")}}static async leaveGame(t){const e=await fetch(`${s}/games/${t}/leave`,{method:"POST",headers:r.getAuthHeaders()});if(!e.ok){const a=await e.json();throw new Error(a.message||"Failed to leave game")}}static async getGameResults(t){const e=await fetch(`${s}/games/${t}/results`,{headers:r.getAuthHeaders()});if(!e.ok)throw new Error("Failed to fetch game results");return e.json()}static async getGamePlayers(t){const e=await fetch(`${s}/games/${t}/players`,{headers:r.getAuthHeaders()});if(!e.ok)throw new Error("Failed to fetch game players");return e.json()}static async startGame(t){const e=await fetch(`${s}/games/${t}/start`,{method:"POST",headers:r.getAuthHeaders()});if(!e.ok){const a=await e.json();throw new Error(a.message||"Failed to start game")}}static async pauseGame(t){const e=await fetch(`${s}/games/${t}/pause`,{method:"POST",headers:r.getAuthHeaders()});if(!e.ok){const a=await e.json();throw new Error(a.message||"Failed to pause game")}}static async resumeGame(t){const e=await fetch(`${s}/games/${t}/resume`,{method:"POST",headers:r.getAuthHeaders()});if(!e.ok){const a=await e.json();throw new Error(a.message||"Failed to resume game")}}static async endGame(t){const e=await fetch(`${s}/games/${t}/end`,{method:"POST",headers:r.getAuthHeaders()});if(!e.ok){const a=await e.json();throw new Error(a.message||"Failed to end game")}}static async restartGame(t){const e=await fetch(`${s}/games/${t}/restart`,{method:"POST",headers:r.getAuthHeaders()});if(!e.ok){const a=await e.json();throw new Error(a.message||"Failed to restart game")}}static async addTime(t,e){const a=await fetch(`${s}/games/${t}/add-time`,{method:"POST",headers:r.getAuthHeaders(),body:JSON.stringify({seconds:e})});if(!a.ok){const o=await a.json();throw new Error(o.message||"Failed to add time")}}static async updateGameTime(t,e){const a=await fetch(`${s}/games/${t}/update-time`,{method:"POST",headers:r.getAuthHeaders(),body:JSON.stringify({timeInSeconds:e})});if(!a.ok){const o=await a.json();throw new Error(o.message||"Failed to update game time")}}static async getGameHistory(){const t=await fetch(`${s}/games/history`,{headers:r.getAuthHeaders()});if(!t.ok)throw new Error("Failed to fetch game history");return t.json()}static async getGameInstances(t){const e=t?`${s}/games/${t}/instances`:`${s}/games/instances`,a=await fetch(e,{headers:r.getAuthHeaders()});if(!a.ok)throw new Error("Failed to fetch game instances");return a.json()}}export{c as G};
